import { type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { memo, useEffect, useRef, useState } from "react";
import { api } from "~/utils/api";
import { useGetMessages } from "~/hooks/useGetMessage";
import { useFindConversation } from "~/hooks/useFindConversation";
import MessageList from "~/components/chat/message-list";
import MessageForm from "~/components/chat/message-form";
import { NEW_MESSAGE } from "~/constants/newMessage";
import { Input } from "~/components/ui/input";
import { ScrollArea } from "~/components/ui/scroll-area";
import ConversationList from "~/components/chat/conversation-list";

interface Recipient {
  name: string;
  image: string;
}
const Chat: NextPage = () => {
  const { data: conversations } = api.message.conversations.useQuery();
  const router = useRouter();
  const [currentConversationId, setCurrentConversationId] = useState<
    string | null
  >(null);
  const { messages, isLoading } = useGetMessages(currentConversationId);
  const [currentRecipient, setCurrentRecipient] = useState<Recipient | null>(
    null
  );
  const { recipient } = router.query;
  const recipientId = typeof recipient === "string" ? recipient : "";

  const { data: userData } = api.user.getUser.useQuery(
    { userId: recipientId },
    { enabled: !!recipientId }
  );

  const findconversation = useFindConversation(recipientId);

  useEffect(() => {
    if (findconversation) {
      // Set the current conversation if found
      setCurrentConversationId(findconversation);

      // Set the current recipient if userData is available
      if (userData) {
        setCurrentRecipient({
          name: userData.name || "",
          image: userData.image || "",
        });
      }
    } else if (userData) {
      // Set the recipient and conversation for new messages
      setCurrentRecipient({
        name: userData.name || "",
        image: userData.image || "",
      });
      setCurrentConversationId(NEW_MESSAGE);
    }
  }, [findconversation, userData]);

  console.log(currentRecipient, recipientId);
  return (
    <>
      <Head>
        <title>chat</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="bg-[#F4F4F0]">
        <main className="container mx-auto flex h-screen flex-col py-4">
        
          <div className="flex h-full w-full justify-between overflow-hidden rounded-sm border border-black">
            <div className="flex w-[25%] flex-col border-r border-black ">
              <ConversationList
                conversations={conversations}
                setSelectedConversationId={setCurrentConversationId}
                setCurrentRecipient={setCurrentRecipient}
              />
            </div>

            <div className="relative h-full w-[75%] bg-white">
              {/* {currentRecipient?.name === undefined ? (
                  <div className="flex h-full items-center justify-center font-bold">
                    select user to start a chat
                  </div>
                ) : null} */}

              {currentRecipient?.name !== undefined ? (
                <div className="h-[9%] border-b border-black px-4">
                  <div className="flex justify-between  p-4 text-black">
                    <div className="flex flex-row">
                      <img
                        src={currentRecipient?.image}
                        className="h-12 w-12 rounded-full border border-black"
                      />
                      <div className="relative flex flex-col">
                        <p className="ml-2">{currentRecipient?.name || ""}</p>
                        <div className=" ml-4">
                          <p className="ml-2 text-sm">active</p>

                          <div className="absolute left-[8px] top-8 h-2 w-2 rounded-full bg-green-500"></div>
                        </div>
                      </div>
                    </div>

                    <div className="relative flex items-center">
                      <Input
                        type="search"
                        placeholder="Search"
                        className="mr-4 rounded-sm border border-black"
                      />
                    </div>
                  </div>
                </div>
              ) : null}

              <ScrollArea className="h-[82%] overflow-y-auto">
                {messages && (
                  <MessageList
                    messages={messages}
                    conversationId={currentConversationId}
                    isLoading={isLoading}
                  />
                )}
              </ScrollArea>

              {messages || recipient ? (
                <div className="h-[9%]">
                  <MessageForm
                    currentConversationId={currentConversationId}
                    recipient={recipient}
                    setSelectedConversationId={setCurrentConversationId}
                  />
                </div>
              ) : null}
            </div>
          </div>
        </main>
      </div>
    </>
  );
};

export default Chat;
